TODO ESTO ES UN BARDO JE
PREGUNTAS


1. Hacer una función que permita ingresar varios elementos a una Pila, tantos como quiera el usuario.  
2. Hacer una función que pase todos los elementos de una pila a otra.  
3. Hacer una función que pase todos los elementos de una pila a otra, pero conservando el orden.  
4. Hacer una función que encuentre el menor elemento de una pila y lo retorne. La  misma debe eliminar ese dato de la pila. 
5. Hacer una función que pase los elementos de una pila a otra, de manera que se genere una nueva pila ordenada. 
​Usar la función del ejercicio 4​.​ (Ordenamiento por selección) 
6. Hacer una función que inserte en una pila ordenada un nuevo elemento, conservando el orde de ésta.  
7. Hacer una función que pase los elementos de una pila a otra, de manera que se genere una  nueva pila ordenada. 
​Usar la función del ejercicio 6​. ​ (Ordenamiento por inserción) 
8. Hacer una función que sume y retorne los dos primeros elementos de una pila (tope y anterior), sin alterar su contenido.  
9. Hacer una función que calcule el promedio de los elementos de una pila, para ello hacer tambiEN   una función que calcule la suma, 
otra para la cuenta y otra que divida. En total son cuatro funciones, y la función que calcula el promedio invoca a las otras 3.  
10. Hacer una función que reciba una pila con números de un solo dígito (es responsabilidad de quien usa el programa) 
y que transforme esos dígitos en un número decimal. Por ejemplo, la pila:

EJERCICIO 1 Y 2

int main()
{
    Pila a, b;
    inicpila(&a);
    inicpila(&b);

    ///ejercicio 1

    cargarPila(&a, "cargar pila");

    printf("los valores de la pila A son: ");
    mostrar(&a);

    ///ejercicio 2

    pasaje_de_datos(&a, &b);

    printf("los datos de la pila B son:");
    mostrar(&b);






    return 0;
}

///ejercicio 2

void pasaje_de_datos (Pila * a, Pila * b)
{

    while (!pilavacia(a)){
        apilar(b, desapilar(a));
    }
    }

///ejercicio 1

void cargarPila (Pila * a, char texto[])
{
    #define ESC 27
    char continuar;
    int aux;


    do {
        printf("%s: ", texto);
        scanf("%d", &aux);
        apilar(a, aux);

        printf("ESC si desea salir:");
        continuar=getch();
        system("cls");

        }while (continuar!=ESC);
}

EJERCICIO 3

void cargarPila (Pila * a, char texto[]);
void copia_de_pila_igual ( Pila * a, Pila * b);

int main ()
{
    Pila a, b;
    inicpila(&a);
    inicpila(&b);


    cargarPila(&a, "cargar pila");

    printf("los valores de la pila A son: ");
    mostrar(&a);



    copia_de_pila_igual(&a, &b);

    printf("ahora los valores de pila B son:");
    mostrar(&b);



    return 0;
}

///ejercicio 3

void copia_de_pila_igual ( Pila * a, Pila * b)
{
    Pila aux;
    inicpila(&aux);


    while (!pilavacia(a)){
        apilar(&aux, desapilar(a));
    }

    while (!pilavacia(&aux)){
        apilar(b, desapilar(&aux));
    }
}

EJERCICIO 4

void cargarPila (Pila * a, char texto[]);
void busqueda_menor_elemento (Pila * a, Pila * menor);

int main()
{
    Pila a, menor;
    inicpila(&a);
    inicpila(&menor);

    cargarPila(&a, "cargar pila");

    printf("los valores de la pila A son: ");
    mostrar(&a);

    busqueda_menor_elemento(&a, &menor);

    printf("ahora se le elimino el menor elemento de pila A:");
    mostrar(&a);





    return 0;
}

///ejercicio 4

void cargarPila (Pila * a, char texto[]);
void busqueda_menor_elemento (Pila * a, Pila * menor);

int main()
{
    Pila a, menor;
    inicpila(&a);
    inicpila(&menor);

    cargarPila(&a, "cargar pila");

    printf("los valores de la pila A son: ");
    mostrar(&a);

    busqueda_menor_elemento(&a, &menor);

    printf("ahora se le elimino el menor elemento de pila A:");
    mostrar(&a);





    return 0;
}

void busqueda_menor_elemento (Pila * a, Pila * menor)
{
    Pila aux;
    inicpila(&aux);

    apilar(menor, desapilar(a));

    while (!pilavacia(a)){
        if (tope(a)<tope(menor)){
            apilar(&aux, desapilar(menor));
            apilar(menor, desapilar(a));
        } else {
            apilar(&aux, desapilar(a));
        }
    }
    while (!pilavacia(&aux)){
        apilar(a, desapilar(&aux));
    }

}

EJERCICIO 5

void cargarPila (Pila * a, char texto[]);
void ordenamiento_por_seleccion (Pila * a, Pila * menor, Pila * ordenada);
int main()
{
    Pila a, menor, ordenada;
    inicpila(&a);
    inicpila(&menor);
    inicpila(&ordenada);

    cargarPila(&a, "cargar pila");

    printf("los valores de la pila A son: ");
    mostrar(&a);

    ordenamiento_por_seleccion(&a, &menor, &ordenada);

    printf("pila ordenada");
    mostrar(&ordenada);


    return 0;
}

/// ordenamiento por seleccion

void ordenamiento_por_seleccion (Pila * a, Pila * menor, Pila * ordenada)
{
    Pila aux;
    inicpila(&aux);

    while (!pilavacia(a)){
    apilar(menor, desapilar(a));

    while (!pilavacia(a)){
        if (tope(a)>tope(menor)){
            apilar(&aux, desapilar(menor));
            apilar(menor, desapilar(a));
        } else {
            apilar(&aux, desapilar(a));
        }
    }
    while (!pilavacia(&aux)){
        apilar(a, desapilar(&aux));
    }
    }
    while (!pilavacia(menor)){
        apilar(ordenada, desapilar(menor));
    }

}

EJERCICIO 6-7-8

void cargarPila (Pila *pilaA);
void ordenamiento_por_seleccion (Pila * pilaA, Pila * menor, Pila * ordenada);
void inserccion_de_elemento (Pila * ordenada, Pila * elemento);
void ordenamiento_por_insercion(Pila * pilaA , Pila * ordenada);
int suma_tope_y_anterior (Pila  pilaA, int  suma);

int main()
{
    Pila pilaA, ordenada, menor, elemento;
    inicpila(&pilaA);
    inicpila(&ordenada);
    inicpila(&menor);
    inicpila(&elemento);
    int dato;
    int suma=0;


    //ejercicio 1

    cargarPila(&pilaA);

    printf("los valores de la pila A son: ");
    mostrar(&pilaA);

    //ejercicio 5

    /**ordenamiento_por_seleccion(&pilaA, &menor, &ordenada);

    printf("ahora su pila esta ordenada:");
    mostrar(&ordenada);
    */

    //ejercicio 6

    //system("pause");

    /**printf("ingrese un elemento: ");
    scanf("%d", &dato);
    apilar(&elemento, dato);


    inserccion_de_elemento(&ordenada, &elemento);

    printf("el numero que ingreso se encuentra en la pila:");
    mostrar(&ordenada);
    */

    //ejercicio 7

    /**ordenamiento_por_insercion(&pilaA, &ordenada);

    printf("la pila ordenada por insercion es:");
    mostrar(&ordenada);
    */

    //ejercicio 8

    suma= suma_tope_y_anterior(pilaA, suma);

    printf(" el valor de la suma del tope y el anterior es: %d", suma);



    return 0;
}

//ejercicio 8
int suma_tope_y_anterior (Pila  pilaA, int  suma)
{
    Pila aux;
    inicpila(&aux);


    apilar(&aux, desapilar(&pilaA));

    suma= tope(&pilaA)+tope(&aux);


    apilar(&pilaA, desapilar(&aux));

    return suma;

}
//ejercicio 7

void ordenamiento_por_insercion(Pila * pilaA , Pila * ordenada)
{
    Pila aux;
    inicpila(&aux);

    while (!pilavacia(pilaA)){
        while (!pilavacia(ordenada) && tope(ordenada)>tope(pilaA)){
            apilar(&aux, desapilar(ordenada));
        }
        apilar(ordenada, desapilar(pilaA));

        while (!pilavacia(&aux)){
            apilar(pilaA, desapilar(&aux));
        }

    }


}

//ejercicio 6

void inserccion_de_elemento (Pila * ordenada, Pila * elemento)
{
    Pila aux;
    inicpila(&aux);

        while (!pilavacia(ordenada) && !pilavacia(elemento)){
            if ( tope(ordenada)<tope(elemento)) {
                apilar(ordenada, desapilar(elemento));
                apilar(ordenada, desapilar(&aux));
                }
                else {
                    apilar(&aux, desapilar(ordenada));
                }
                }
        while (!pilavacia(&aux)){
            apilar(ordenada, desapilar(&aux));
    }


}

EJERCICIO 9

void carga_pila (Pila * a , char texto[]);
int elementos_pila (Pila  a);
int suma_elementos (Pila  a);
float dividir (int a, int b);
float promedio_pila (Pila  a);

int main()
{
    Pila a;
    inicpila(&a);

    int contE=0;
    int sumaE=0;
    float division=0;
    float promedio=0;

    carga_pila(&a, "ingrese sus notas");

    printf("los datos de la pila A son:");
    mostrar(&a);


    promedio= promedio_pila(a);

    printf("\nel promedio de la pila es: %.2f\n", promedio);


    return 0;
}

///funcion 4

float promedio_pila (Pila  a)
{

    int contE= elementos_pila(a);
    int sumaE= suma_elementos(a);
    float promedio= dividir(sumaE, contE);


    return promedio;

}

///funcion 3

float dividir (int a, int b)
{
    float division;

    division= a/b;

    return division;
}


///funcion 2

int suma_elementos (Pila  a)
{
    Pila aux;
    inicpila(&aux);
    int sumaE=0;

    while (!pilavacia(&a)){
        sumaE= tope(&a)+sumaE;
        apilar(&aux, desapilar(&a));
    }
    while (!pilavacia(&aux)){
        apilar(&a, desapilar(&aux));
    }

    return sumaE;
}

///funcion 1

int elementos_pila (Pila  a)
{
    Pila aux;
    inicpila(&aux);
    int contE=0;

    while (!pilavacia(&a)){
        contE++;
        apilar(&aux, desapilar(&a));
    }
    while (!pilavacia(&aux)){
        apilar(&a, desapilar(&aux));
    }

    return contE;
}

///funcion carga pila

void carga_pila (Pila * a , char texto[])
{
    #define ESC 27
    char continuar;
    int elemento;

    do {
        printf("%s: ", texto );
        scanf("%d", &elemento);
        apilar(a, elemento);

        printf("ingrese ESC para salir: ");
        continuar= getch();
        system("cls");
    } while (continuar!=ESC);
}











